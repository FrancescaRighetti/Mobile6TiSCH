//
// Generated file, do not edit! Created by opp_msgtool 6.0 from shmg/backboneprotocol/BackbonePkt.msg.
//

#ifndef __BACKBONEPKT_M_H
#define __BACKBONEPKT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class BackbonePkt;
/**
 * Class generated from <tt>shmg/backboneprotocol/BackbonePkt.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet BackbonePkt
 * {
 *     int mobileNode;
 *     int borderRouter;
 *     int seq;
 *     double rssi;
 *     int outPort;
 * }
 * </pre>
 */
class BackbonePkt : public ::omnetpp::cPacket
{
  protected:
    int mobileNode = 0;
    int borderRouter = 0;
    int seq = 0;
    double rssi = 0;
    int outPort = 0;

  private:
    void copy(const BackbonePkt& other);

  protected:
    bool operator==(const BackbonePkt&) = delete;

  public:
    BackbonePkt(const char *name=nullptr, short kind=0);
    BackbonePkt(const BackbonePkt& other);
    virtual ~BackbonePkt();
    BackbonePkt& operator=(const BackbonePkt& other);
    virtual BackbonePkt *dup() const override {return new BackbonePkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMobileNode() const;
    virtual void setMobileNode(int mobileNode);

    virtual int getBorderRouter() const;
    virtual void setBorderRouter(int borderRouter);

    virtual int getSeq() const;
    virtual void setSeq(int seq);

    virtual double getRssi() const;
    virtual void setRssi(double rssi);

    virtual int getOutPort() const;
    virtual void setOutPort(int outPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BackbonePkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BackbonePkt& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline BackbonePkt *fromAnyPtr(any_ptr ptr) { return check_and_cast<BackbonePkt*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __BACKBONEPKT_M_H

